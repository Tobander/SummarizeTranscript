Thank you. So. Hello everybody. Hello. Okay. microphones if you don't already have, so we don't have interruptions. So is everybody able to clearly see me and hear my voice? Yes. Okay. Perfect. Otherwise if I'm too, if you're not able to hear me clearly, I can use a microphone as well. Just hit me up in the chat if there's a, or occurs a problem or if there's maybe a problem with my internet connection. All right. So once again, hello everybody. My name is Tobias Lemle, but I know that's a complicated name, so really Tobias absolutely fine with me if that's all right for you. Once again, I'm very warm. Welcome to our introduction to machine-done course. And as you may have heard in the last couple minutes, I just found out about the feature and zoom of playing waiting music. And in case you were wondering about the song, well, there was my interpretation of Lady Gaga's poker face. And I have created it with a tool called MuseNet, which is an AI tool from Microsoft that lets you kind of compose music using artificial intelligence. So really cool. You can select the instruments and you can select a style played like Beethoven or Mozart or lots of other things. So as you can see and hear I'm pretty excited about AI in general, as this is really one of my favorite topics to talk about. And I really think it's such a great idea to give students like you no matter what you're studying or no matter what your major is or your background, a blowover view about this topic. As we all know, this will eventually become even more and more part of our everyday lives. So some organizational stuff before we get started. You already told me you can clearly hear and see me, so that's no problem. And as you might have guessed, this is a completely remote course. So please let me know if I'm going too fast, if I'm going too slow or if you need more breaks or less breaks or anything like that in that matter. And if there's questions that arise during the the lectures or if there's anything that's not clear in my slides, please let me know. I will try to answer the questions right here, maybe in the chat or maybe after that lectures. Or you can also write me an email or I think we have a message board in Blackboard 2. I will also post all the slides, all the exercises, all the sample data on Blackboards and I will try to do always a couple of days prior to the upcoming lectures I will try. So you can download it in advance and take a look at it. And of course, there will also be a recording of every lecture, just in case you missed it or maybe you have technical problems or maybe you just want to rewatch we watch the whole lecture. And I will post the link always afterwards, afterwards after each lecture and put the link on Blackboard 2. There will be lots of practical examples and exercises in our lectures where you can follow me along on your computer at home and I would highly recommend doing so. As you will quickly notice, everything in machine learning is way clearer if you do it rather than just hear me talking about it or seeing in the slides. And that also brings me to the next part which I'm pretty sure you're eager to hear will there be a test? No, there won't be a written test but of course you will get a grade. You will get a grade afterwards so we'll do a couple of assignments. I don't know how many maybe one or two maybe three and you sent me in your results and then you get a grade for these assignments and also there will be a pitch video at the end of our lecture. So the assignment the exercise the assignments will amount to 30% of your grade and the pitch video at the end is 70% off your grade. And I think we will do the pitch video as a group brock. However, everybody will be great at individually. The idea behind this is after this course you should have done like a basic understanding of what is capable of machine learning and what not. So you should come up with an idea a use case that could be improved using AI because this way you can show that you understood which areas of machine learning are a good fit and what algorithms do make sense in this kind of use case what kind of data you will need for that and so on. And the second benefit is of course the pitch itself because it is so valuable today not only to have like good ideas but also to be able to sell them and because I'm a big fan of bouncing ideas back and forth we will do this in a group of maybe two or three I don't know yet. So right now don't worry too much about the pitch we will get into that in more detail after our last lecture. So what else? We have a total of I think 10 different topics and I hope I really hope we get through all of them but it's a lot and I will rather alter the pace if we need to than just to speed through all the topics because as I said my goal is to get to a point where you get a basic understanding of machine learning in general because I guess most of you will eventually end up in some kind of leadership role and you will eventually get in touch with AI and machine learning in one way or the other. So for instance you probably get approached by by one of your data scientists or sales representatives and in such a case it really makes a difference when you when you basically understand what they are talking about and I don't mean you have to write algorithms or complicated pipe encodes for yourself but when somebody tells you maybe this model has an AUC of 0.9 you know that if that's good or bad and when you read that the model has been trained using a support vector machine you know that's a classification algorithm and it makes sense to use it in this case. So each new topic we will have we start with some theory and always follow up with a practical example where you see the algorithm we're talking about in action and where you see the problem at hand using real life data. So I guess some of the stuff is pretty straightforward because you may have already seen it in some math or statistic class and some of the stuff is not so easy to rest but first time you hear it like neural networks of course for example and that's why I would really suggest also we don't write a written test you maybe take a look at a second look at the slides after our lectures because that applies especially for neural networks and although this is no rocket science it gets so much clearer if you just take a second look at it and also also forget the most important part have fun with it. I know that sounds ridiculous but really there is so much really so much free data out there and basically and the basics you learn here are more than enough to play around with it to make predictions I don't know about the house prices in your area or what's the ideal time to get up in the morning to maximize sleep then but don't be late or and maybe I'll show you this at the end if we have time build an app that can recognize your face or your dog's face or vice face whatever you have trained it on so there are already so many tools also no code tools out there that will do the heavy coding for you so you don't have to do that you don't need to understand everything but you need to understand the basics first and that's our main goal in this course and this introduction to machine learning and just to give you a quick idea where I'm coming from so you know who's talking to you I've been up in studying business engineering then I could be worked in logistics then as a management consultant and finally I went into financial services so right now I'm working as a software architect in the compliance department of a financial services institution very focused mainly on anti-money laundering or short AML and fraud detection which is an area where AI will become more and more involved in the coming years so so right now we're doing a lot of projects a lot of studies or proof of concepts just to check how AI can help detect illegal transactions so that was how I got inspired and hooked on everything around machine learning and I hope I can pass some of that excitement at least some of it onto you so without further ado I would say we're going to start and I'm going to share my screen so you can see my slides and we'll do a quick introduction so if there's any problems just simply up in the chat but for now let's I'm going to share my screen all right perfect so I quickly pull up the chat just to see your questions okay everybody able to see this likes yes perfect all right so now I'm going to start with a restored short story and imagine it's a couple years back it's it's a hot summer evening in 2014 and Bishop Bond the girl on the right she was already late when she was picking up her friend and as they were walking down the sidewalk they noticed this old kick roll or leaning abandoned on the wall they don't really think about it but just pick it up and they try to roll the thing down the street which is actually for for small kids so suddenly a woman is shouting at them from her kitchen window hey that's my kids kick roll and leave that thing alone the girls immediately stop leaning the kickback roll lean the kick roller back against the wall and just keep walking down the street as if nothing happened what they did know a neighbor has already watched the whole scene and called the police so two blocks furthered on the road they stopped the two worlds and they arrested for bulgarian theft this was the first time Brisha got arrested in her life so in the summer the same year the 41-year old Brunan Prada the guy on the left he got arrested for breaking into a hardware store he has already served five years in jail for unrovery and attempted arm robbery so Prada looks like the typical repeat of fandom but surprisingly something very strange happens when they both got scored from an algorithm called compass on their probability to lapse back into crime so Borden who is black she gets an eight and Vernon who is white he gets a three so now eight years later we know that algorithm was completely wrong because Borden has never been arrested since then Prada on the other side is serving right now an eight-year sentence for breaking into a warehouse again so in the US the incarnation rate for Latin americans is three times as high and for after Americans six times as high as for white people and exactly for this reason many civil right movements have pointed out that because of discrimination in law enforcement the incarnation rate doesn't represent the actual crime rate and they demanded more objective non-discriminatory decision-making systems like this algorithm but now it looks like that this algorithm is even less objective it seems it did even amplify the discrimination so what happened I would like to show you with this and of course without the examis why AI and machine learning on one side have the potential to to do so much great stuff that will improve our everyday allies but it can also go sideways very very easily and that is exactly the reason why it is so important to give everybody at least a basic understanding of machine learning and the ability to questions or assess the results all right so let's take a more detailed look at this algorithm at compass and why it produced so confusing results in the first place so the model we're talking about it gets information about the past of criminals like how many times they've been arrested what crimes they have committed the age gender but also things like if their relatives have ever been arrested if their parents have been divorced and so on and then the model takes all this information and calculates a risk score similarly to let's say a car insurance where drivers with a high risk going to one group and drivers with a low risk going into the other but all drivers from the same group are treated equally so to do this the algorithm looks for characteristics that are in common with people who get arrested again and characteristics from people who become righteous citizens again so actually that sounds totally reasonable so why does the success rate of this algorithm is so low it's actually barely 25% so what I'm trying to say is if somebody is presenting the awesome results of this machine learning model to you you should always critically check the quality of the predictions and not just take them blindly for granted of course there are lots and lots of greatest examples of machine learning models and applications that do great things but it is not a magical machine where you just put in lots of data on one end and I'll come to perfectly reasonable and good decision on the other like in this picture here quite the opposite is the case because in order for model to make good predictions humans have to make a lot of important decisions and a lot of parameters first and that's actually a good thing because that means we as humans aren't completely at the mercy of those machines but we can contribute into decision-making process and that is exactly what we're doing right now we will take a look under this hood and put ourselves in the position of an algorithm to make such decisions let's say you're in a job interview and maybe you know from the get-go this is going nowhere wouldn't it be great to find out exactly those characteristics that are responsible for a candidate to succeed in an interview just by looking at the candidates that were successful in the past and then build a machine learning model to find exactly candidates like that 100% objective zero discrimination and without doing five or 10 rounds of interviews sounds good let's try exactly that here you can see 27 job candidates for you 13 of them were successfully employed that's the green ones yeah the smiling ones and they stayed at least two years in the company and the other 14 candidates they were entire that's the the sad looking gray ones so these were the unsuccessful candidates looking at this diagram you see that there were two characteristics responsible for the decision first the number of years someone has been unemployed and second the number of years of experience on the job let's try some here um maybe you have printed out this this picture if you have seen it on blackboard well otherwise it's totally fine to just imagine a line or take a ruler or pen just try to make a line in this diagram to separate successful from unsuccessful candidates the line can be sliding upwards and can be sliding downwards left right right to left it doesn't matter it just has to be a line and no worry there is no idea of no right solution you can't make a mistake just try to put yourself in the shoes like let's say you're the head of HR how would you decide where would you draw the line okay I'll give you maybe a couple minutes um just to think about it and then I'll show you some of my lines and you can pay your solutions okay okay was everybody able to draw a line all right I would get most of you choose a line um and again I said there's no right solution but something along those lines here because there's no ideal solution there's also no line that makes fewer than form mistakes can you can you see the form mistakes so the this one and the line we both make form mistakes and there's there's no line that that makes fewer basically what we just did is we have trained an algorithm called support vector machine short SVM and this is a perfectly natural task for computer because most of the time there's way more than just two characteristics to take into consideration with this algorithm or line you are able to immediately tell about a new candidate if she will be successful or not if she's on the upper side on off the line you should hire and if she's done here you don't hire her there are other algorithms you can use for this task like maybe decision tree which will separate the candidates like this or even a neural network if you like to if you have the power which will the separate the candidates like this the difference is just how they split the data to find the best solution but for now we'll we'll stick with the way easier SVM so let's put this to a test just remember your line we have now a new candidate marked by the X and she has 5.5 years of experience and a total of four years of unemployment think back to your line would you hire her or not how many of you would have hired her just type in higher or not higher oh okay wow and it's pretty clear results so but again just for fun yeah exactly exactly now but I guess if you ask this if you take the same data and ask this with different groups of people they tend to make different results I guess most of you have as you all most of you hired her put put the line very very close to the bottom where I don't know maybe someone at Google or Amazon would have put the line way higher so yeah that's that's all we write a groups are biased for sure with these kinds of questions and that is often a problem so before we start training a model you should define explicitly what a good decision is what is a good result for you how should it look like and only then you should start thinking about where you get the data to train your model which algorithm you want to use and how the model should look like okay so the first thing is always answering the question how does success look to you so all the way to the right the further the right number one prediction that is the first step we we need to do in our example with the higher on prospects do you want to get as many candidates as possible and therefore risks to get some candidates that don't really fit your profile or your company culture or do you just want to get candidates that fit your profile 100% but therefore risk to in don't invite prospects that would have been a good fit and only then only then you start looking for data to train your model and you start looking for a KPI to check how good it is working to fulfill the requirements and this aspect is really really important and often the reason why so many machine learning projects fail or never go with the production at all and as this is so important I really try to explain this once more with an analogy to make it even more clear so imagine you're trying to train the dog okay so to do that the first thing you need to know is what is the goal of our training do you need a dog for hurting your sheep do you need a dog for chasing criminals or do you need a dog for winning contests because what might be considered a good behavior for a police dog like I don't know chasing somebody and then bite him in the leg maybe isn't so much for a dog in a contest right so let's say you decided you needed a dog for hurting your flock of sheep and when he's able to keep the herd together you consider that as good behavior only then you start thinking about where you can get all the data and with training methods make sense to try to train to teach him and exactly that like for example do I have enough looking sheep to show him what a sheep is in the first place and I like this picture to visualize how important it is to start with a clear goal in mind so now back to our support vector machine and the right candidates we have already seen it ain't possible to find a solution that is 100% right every time but as I said what is what is worse inviting the wrong person to an interview or miss out the right person from interview because for a computer to make this decision it needs a quality measure if we stick with the analogy of the dog the quality measure decides whether the dog receives it read on a like police dog by thief in the leg good boy sheep dog by sheep in the leg bad boy I'll give you another example where the definition of a completely wrong quality measure lets needs to let's say improvable results so can you imagine what this is trying to be I didn't find a really good picture of it anybody nope okay I love your hint exactly alright that's supposed to be a vacuum cleaner vacuum robot so actually this vacuum robot was called phantom and for his owner he was working way too slow so what did he do he mounted a small computer on top of it as you do and it traded with a machine learning model and the goal was it was supposed to a vacuum faster and be watch out for furniture in his way so its quality measure was high when it drove really really fast and low when it bumped into things which his front sensors would report to him can you guess the result and keep in mind the system always looks for the easiest way to solve a problem like the cheapest way to get the highest score what do you think happened did it work of course it didn't work the result was phantom speed it backwards through the whole flat with lightning speed and it bumped into everything that was in his way why plain simple phantom didn't have any sensors in the back so as far as phantom was concerned no sensors no collisions so I know that's kind of funny example that should only prove once more that a really really small mistake a little callusness can lead to completely useless solutions and by the way phantom trained his or his owner trained phantom using neural network which will will take a deeper look in one of our upcoming lectures and just to try from the point another example just to make it really really clear why this is so important in machine learning so again you see I'm not the best drawer but this is supposed to be a parking lot so imagine you're running a company with a big big office and a huge parking lot in front of your office it is so huge it has a total space or it has a total of 1000 spaces and on any given point in time there are 10 free spaces on average you now want to put up a sign outside showing how many empty parking spaces you have right now so you put up cameras and you use a machine learning model to check if a car is parking in the space or not and as a quality measure you choose accuracy and you should for let's say 95% accuracy I will explain accuracy in in more detail on the next slide but for now of the students made how many were correct that is accuracy so again what do you think will happen and keep in mind what is the easiest way for the model to reach at least 95% accuracy as anybody any idea do you think it will work and there will be less free spaces I'll give you a minute to think about it okay I'll tell you the answer and you might have already guessed it won't work at all because the model will most likely tell you all spaces are full anytime why because imagine at any given point in time I said there are 10 free spaces meaning when the model tells you it's full it makes a total of 10 mistakes and 10 mistakes out of 1000 is an accuracy of 99% and that sure beats my requirement which are set of 995% which will eventually lead to 90 parking lot so that's but not enough of the examples okay so going back to our problem choosing the right candidates who will get invited to the job interview and who not let's think about a good quality measure for this kind of problem so the red line is the one we already see before that makes a total of four mistakes right here I'll put a red circle around the four mistakes so 13 have been successfully hired and 14 candidates have been rejected so when I add up all correct decisions 23 divided by a total of 27 I end up with 85% and this number is called the accuracy of all decisions made 85% were correct sounds pretty simple and straightforward right however oftentimes accuracy isn't a very good quality measure as we have just seen like imagine a company like Google or Emerson for instance a company that receives way more than a thousand times more applications than they have open-breaking jobs so an HR manager could not hire a single person and have an accuracy of 99% anyway because for 99 of those 1000 applications he was right and for this reason there are more than 25 different quality measures out there and it really depends on the situation at hand which one is right and that's exactly why it is so difficult to buy systems with already pre-trained models it's simply unlikely that the model has been trained for exactly that quality measure that is right for your situation or for your company however that's not always the case for use cases like let's say facial recognition it absolutely makes sense to profit from pre-trained systems for use cases or lots of other use cases like that but maybe think about fall recognition where you have different writings and different languages like the one at the seven at U.S. and likely write it in Europe but for something like choosing the right hiring candidates where every company has different requirements it really doesn't make any sense at all so it's very important to not let a data scientist alone choose a quality measure is even more important not to forget that with every quality measure you choose you're always making decisions that can affect people's life and I that's my personal opinion but I think that is probably the most important aspect about machine learning at all so therefore let's take a look at some let's say moral dilemmas the mitochondria and how this can eventually lead to something like discrimination for example so better our case of pressure born the girl that has been classified with a high risk of relapsing back into crime from an algorithm how would you decide if you were the one in charge for training the responsible support rectum machine how would you optimize your model we have again our 27 data points but this time with a totally different meaning imagine it is possible to find out I don't know what genetic tests is someone is born good or evil how would you draw the line this time to classify new criminal offenders remember these are the exact same data points but thus the context the decision you have to make change the way you draw the line because somebody who is worried about the possibility that there are people out there who can get away with crimes which shows a totally different quality measure than someone who is way more worried about the chance that there are innocent people who have to go to jail all right so once again same data points try to draw a line and if you are a couple minutes and then let's see how many of you didn't send somebody innocent to prison honor All right. I'm just guessing, but I think I'm guessing maybe you draw the line. You drew the line different now. Just some lines from me for comparison. Take a look at this. So the red line is clearly somebody who wants every offender to go to jail. The green one, Dolos, she wants to make sure knowing some people have to go to jail ever. And the orange one would be somewhere in between those two. So you'll see the decision for a quality measure is always also a model decision, a decision about which error has the bigger consequences for you. To make that even more clear, let's take a look at a potential machine learning use case where the consequences for error are really fatal. I don't know if anybody has seen this picture before. Does anybody recognize this picture or what it should represent? It's a yes. Okay. Oh, quite a lot. Okay. So I guess you know the model dilemma of this. It's called the trolley problem. And it's a moral thought experiment. We have a appointment who can prevent a fatal collision that would cost five people's life, the five people on top. However, to do this, he has to sacrifice the life of this one man down here. And every data scientist that is training machine learning models for autonomous driving has to face exactly this dilemma. The dilemma of deciding which error has the bigger consequences. Now a really drastic example of that. So there were people at MIT that have asked exactly that question. And they built what is called a moral machine, an application that shows different scenarios to see how people react and how people decide. And don't get me wrong. This isn't supposed to make fun or played like a game. But if autonomous driving should be real someday, you have to think about these kind of decisions. And the scenario is always like this. It's going to have an accident, no matter what. But you have to decide what if it should keep going or if it should make a turn. And I'll show you examples, but you can drive it out of yourself in the next break if you'd like to. And I will put up a link to the to the ad. So here's an example of an autonomous vehicle. So nobody's sitting behind the wheels. And in the first case, you are going to hit one female, two male and two female executives. And in the second case, you're going to hit four homeless people and one female. So it's up to you to decide. And if you open up the app, you just click on one of these scenarios and at the end, you get an evaluation of what kind of a decision-making you are. So one was like, here, this is not an autonomous vehicle, but there are three people, four people illegally crossing the street, which you can see because the traffic light is red when they're crossing the street. And it is one female doctor, one overweight woman, one female athlete and one female executives. And on the other side, in the car, are sitting one female doctor, one overweight woman, one female athlete, one female executives and one young boy. So again, this isn't supposed to be fun, but it's hard to make those kinds of decisions. So you see the application of machine learning to an existing problem isn't so straightforward at all. There are a lot of questions that have to be answered before. And but on the other hand, there are already lots of great use cases. Where the use of machine learning is a great benefit. And it makes our lives easier. So for example, everybody knows that has a smartphone, how good Face ID is working. For example, there are also numerous examples of document ahead, writing recognition, like in logistics or in financial services. Basically, you can say machine learning can be very successful when the following criteria are met. First, there is sufficient and good data available. That's the input. Second, there is an easy to measure ground rules that we want to predict. That's how our output. Third, it is easy to use feedback to steadily improve the model. And finally, there is a clearly defined quality measure, which we've been talking about a lot now, that we want to optimize. So let's look at an example. Let's take Facebook for example. Facebook has over two billion users. So that's a pretty good amount of training data. So the ground rule is also pretty easy to measure, because it's clicks on post pictures, videos. And it's also pretty easy for them to get feedback. As every click of a user indicates that the prediction was correct. And every time a user doesn't click, shows the opposite. And finally, there's a clear quality measure that they want to optimize. We all know it's revenue by showing ads. But even under such perfect conditions, damage can be made by using the machine on models. Like radicalization is one of them, also discrimination. And there are basically four ways how this can happen. We have to go back to the case of Bridger Bowden, who apparently got a higher risk, because it's just because of her skin color. From an algorithm that should actually eliminate such discrimination. Well, algorithms try to separate people into different categories. So they discriminate so to speak. So this is a problem when ever sensible information has been used to do that. Like imagine ethnic origin, gender, religion, disabilities, age, sexual orientation, and so on. And a good example for that is the hiring process we just spoke about. Like Anderson Google or Facebook, they tried for years to predict which candidates were a good fit for them. As input data for their training. Of course, they use data of people they have hired in the last 10 years. So the problem, as you look at the screen is only every fifth employee in these companies were females. And also the algorithm views the gender as input variable. It was able to derive character is six that correlate with the gender like. Memberships in women's gyms female colleges or even the motivation line, which is totally different depending on gender or cultural background. So when your training data already contains discrimination. The algorithm will only amplify it even without the knowledge of sensible information. And what is the result? The result is even fewer female hires. So the second way how discrimination can happen is because of missing data. Even without Alexa, Cortana or Siri, we all know that controlling things with our voice will only get bigger and bigger. But did you know that these systems have mainly have been trained with the voice of white males without any accent at all. And that's a problem because like for example in Australia, when you apply for working visa, there's a speech recognition so that will evaluate if you're speaking well enough English. And to receive a visa after all. And somebody with a heavy accent won't pass this test as the system just haven't been trained for that. Right. So then the third possibility is quite interesting because discrimination can be provoked also by omitting sensible data for training. To show you what I mean, let's go back to our data set with your real lapsing criminals. Remember, there was no line that was able to separate guilty and innocent people perfectly. But maybe that changes if you add some sensible information like gender to it. How does it look now? When we separate the data by gender female to the left, male to the right. Suddenly it's perfectly possible to find a solution with no error at all. If we put the data back together, this ain't possible because the red line, the one that only makes for errors, clearly discriminates male citizens. You see that? Two of them are classified as criminals, even though they're actually innocent. And on the other side, two guilty female citizens, they are found innocent. Nice. Good. So the first possibility, how discrimination can get in your data is called continuous learning. And there's a lot of you have heard of Ty. This was actually a couple of years back and it was a chatbot from Microsoft. And you should talk to people on Twitter and learn from their questions and answers. And at the beginning, this worked pretty well, but then some users targeted him with racist or sexist comments. And soon enough, he was replying the same things. And this is kind of a good example of what we call garbage in garbage out. So you could use like automatic filters so that that stuff doesn't get posted. But the question again is, which kind of error am I willing to accept? Is it worse to censor a post that was actually harmless or is it worse to censor racist post? To not censor racist post. So social media platforms like May Facebook, they have their own cleaners. That scant from millions of posts per day and delete content that shouldn't be shown to their users. So you can imagine if there was a better way of weighing freedom of speech against human dignity, I'm I'm pretty sure those companies will do it. So that's I think that's about it for my quick little introduction. Just just to sum it up, what I really tried to bring a grass in these couple of slides were mainly two things. Okay, with a couple of years down the road, I already said you pretty sure end up in some kind of leadership goal and you get approached by say it's people that promise you that the machine learning model is not on 99% better or detects 99% of x y set or is 90% more efficient than x y set. Then you know you should pay attention attention to what kind of quality measure goes used for training. Did they define a clear goal what the model should predict and is this the same goal your company has in mind. Like in the example with the higher in process. And second, the second thing I wanted to bring across is this if decisions of a machine learning model will affect people's lives like the compass algorithm we saw in the beginning or like the outer part of the car. They really should be treated with extreme caution. It should be totally comprehensible why the system has made a certain decision to exclude something like this generation. It should also be clear which algorithm has been used which quality measurements optimize and what kind of data has been used for training. To give you an example, I think it is so important we take two different use cases that use exactly the same algorithm on optimize the model for exactly the same quality measure. Just think with all what we already know let's say we use a support vector machine or is our algorithm and we want to identify as much bad behavior as possible. Our first use case is again identifying criminals and our second use case is identifying spam email spam. I'm sure as you all know from experience I guess sometimes you're waiting for an email for hours just to realize it has gone to your span forward so that's the this one here. No big deal right the SVM just made a simple error however imagine making the same mistake in the first use case. Because this and somebody innocent to prison and I just think it is important to think about these conscious lenses before we go into any of our different parts and algorithms of machine learning. So with that out of the way let's dive right into machine learning and let's first take a look what is lying ahead of us in our upcoming five lectures. So we will start with mat.lib and visualization and I think that will be that will be enough for today. I would suggest we make let's say five minute break that all right so we're back at our past two everybody everybody okay with that. Okay perfect so see you in five minutes. you you you you you you you you you you you you you you you you you you you you you so I'm back again. I hope you're still fresh and excited for our second part first of all any questions about about the slides or about anything in general. I can help you with I hope it wasn't too much I know it was it was a lot of slides just all with but as I said I just wanted to bring bring this this point really across why why I think it's so important to to answer those questions before you go into anything more detailed in machine learning. But now we will do some more practical stuff and we also do a couple more breaks just just to do stuff this and we will do a couple more things. All right so how we start I heard and you correct me if I'm wrong you already have an introduction to python is that correct. Yes. Okay so don't worry we don't do heavy coding but just just you know just so I know you've already seen some code and you already used an editor so because I will I will stick with the basics but I can't repeat the basic stuff how to run python but I thought as you just had your lectures I guess in the in the first weeks of 2022 I saw that's a good idea to start with some some coding as it's still fresh in your mind. And I'm sure you already noticed that the power of python lies in its various libraries that are so easy to use and one of those libraries is called met plot lip and what it is it is basically used to visualize data. And why is that so important as I said it's often one of the first steps in machine learning to kind of get a first impression what you're actually working with. And because normally you have a lot really a lot of data it's more easier to comprehend it if you can visualize it first and that's why we start with met plot lip. However before we get started I would suggest that you have an editor ready where you can run some python code because this way you can follow me along as I'm going through examples and you also do some exercises and you can run the code on your own computer in parallel. I'm sure you already realized that this way it's much easier to not coding. We also do some some breakout sessions where where we'll do the examples I've provided on blackboard and I will check on you in each room. So I'm going to you're totally free to use whatever editor you want to but I quickly introduced the editor I'm using so you see where how the idea looks like and it is called spider. I provided some download instructions on blackboard so if you haven't had the chance to install it or if you don't like to use it or if you technically weren't able to there's also a spider online version. Just go to the window link I posted in a manual. I don't know if anybody has already tried to start it because it will take a couple minutes if you use the window because a virtual environment has to be created first and if you do this the first time it really takes I don't know to three or four minutes. You can use that as well if you don't like to install anything on the computer but it looks basically the same it's just a little bit slower. So when everybody is ready that's basically all the requirements we need to start and we are ready to do some coding samples with my plot lib and basically the structure we are going to do this is. To some theory I don't know to three slides let's say plotting a line or drawing a scatter plot and then we do an exercise on on spin afterwards so either I'm showing you the exercise on my screen and you can follow along or we do a quick break out sessions where you can do the coding in your on your own. Okay perfect any questions as anybody trouble using an editor at all. Okay that's that perfect. There was my main worry. So I'm going back to the slides share my screen and afterwards I'm going to share my spider so again if you have trouble seeing either off the two then just give me a hint in the chat. So let me quickly open up the chat okay so everybody able to see the slides. Yes. Okay perfect. So that's wider that's map plot lib. So part of map plot lib it is is a simplified interface and the interface is called a pipeline. That the pipeline basically doesn't require to know anything about the inner of the system which is a good thing and because you can create visualizations like this without anything knowing about pipeline at all. So for the most common tasks it just gives a convenient set of commands which we can take advantage of. So let as I said I quickly introduce the commands like this and then we will write the actual code which is exactly what you see on screen. Inspire. So the first thing we do is we import numpy numpy is a if you haven't used it before it's just a numerical processing library which is great for working with data of any sort as we need to create some test data to visualize. So and the second part is we have to import pipeline. The most common thing in map plot lib is basically to plot a line. But in order to do so we have to create a line first and to create a line we need some x values and we need some y values and for the x values we use numpy's Lin space function which you see here. The Lin space function basically has two parameters. Don't worry this this is just to create data the first one is the starting point and the second one is the end point and the third one is optional is how many values we want to create. So basically this line is telling you hey I want to have 500 values and these values should be between minus two times p and two times p. So that's it and then we need to create the y values which uses the numpy sing function using our just created x values. Alright so we then we have to do this the first time initialize a figure because we need a figure to plot. Then we hand over our just created values and finally we show this plot on screen and basically that's it it should look. Sorry. It should look something like this. So you see the best thing about map is how it's really like common tasks because once we had our data which was the main part it then only took three lines of code to make this plot. So we are all set so let's try this on our own and again just follow me along as I'm writing the code with me and then maybe we have some a couple of minutes replicated on your own computer if you want to. So I'm going to head over to the editor and I hope you'll see it. Okay so right now we the editor. I guess it's pretty small so let's let me try to zoom in a little bit and you tell me when it's good. Is that fine? Yes it's good now. Okay just tell me if it's if it's too small and then we can zoom in a little bit more. Yes that's spider if you haven't seen it. The great thing or why I'm using spider here is because it very conveniently shows the plot here down here right in a console and also you can. You can see your files on your computer here as well and it shows all the variables you create here but we will see that in a minute. So first thing to do we just write the code I just we just saw on the on the slides so first I'm going to import numpy. So I'll give you a couple of minutes when I'm if I'm typing too fast okay so then we import high plot. And then we need our x values using num pies a list based function and we've used two times p and minus two times p. And we want to have 500 evenly distributed values and then we create the by values using some place sing function handing over just created x values. So then first time we need to initialize the figure we're going to plot and hand over our values to the plot function so x and y. And last thing we want to do is show it on screen. Alright so if I'm executing this you see it's pretty conveniently just see it on on the screen and also you inspired you can see it here and a little bit bigger in the in the plots pane. So let me know if it works for you or if you have any problems running this this code or questions about any of the functions used. Or just tell me if it's working. Yeah I do have a question for a couple of functions that we used if I can. One is what is actually the sync function doing. We want to you see that's like a curve sinus curve and to do that we need a need a function that is. Yeah that will create those those y values for us it's it's nothing it has nothing to do with my plot lip it's just because I wanted to draw something like a side the sinus curve and you can do that with the sync function. Okay okay thanks and then also why we I mean what are we doing in when we write the first time like figure PLT figure why it's like he has no input. It's just the figure is here the plot we drew here and if you wanted the first time that's called initialization you need to analyze the figure it's it's like. The ground where you want to paint where you can paint something something okay but we will I have I think one or one or two slides on this in. A couple slides slides on well I will we will take a look into figure but as far as as far as this goes you just need to initialize is the first time yeah. And then you can use the plot functions to draw a figure. Okay yes thanks okay so you see that was a pretty quick as I said most of the time most of our time went into producing the values which you normally don't have to because you have data but we need to create some fake data but then it's it's just three lines of code so. Now I will go back to the slides I hope that's okay for because we we jump pretty much back and forth between slides and exercises I hope that's alright if that's too complicated just tell me and. We'll first do the theory and then we write the code but I think it's more practical if you see the theory and then right afterwards we write the code just let me know. Okay so. The second most common plotting task is to show points in a in a scatter plot and this is streamlined to in that plot clip first step again we create some fake data this time using the random function and we create some evenly spaced X values between minus one and one you see now I didn't write how many values I want to. Create and the default value is 15 so now we don't create 500 we create just 50 values all between minus one and one. And we make some why values that are similar to X but have some normally distributed random noise added to them that's what this function in the back is doing. Before we then plot each of the points describe by our X and Ys and we display the result on screen and that should look something like this that's a pretty nice scatter plot and with just this little bit of map plot with in like I don't know 10 minutes you already know enough to be dangerous okay so back to the editor and let's try to draw a scatter plot as well. So just deleting this and again we use a little space this time only minus one and one and then we create Y values using our X values but we add some random noise to them using the normal function. And the size of our X values. Okay so now we have the data really again. Right now we don't have to initialize the figure again you can do this but you don't have to so we can skip the figure method and just call. scatter the method scatter is for growing scatter plot and we hand over again our X and Y values finally going it on screen. And that should look something like the picture in the slides. Once again you have to tell me if I should should wait for you to write the code otherwise I will just wait a couple a couple of seconds so you can recreate it and tell me if you have problems. Again don't go into much about this stuff here that's just to create really fake data and use what I'm using this is I want to create Y values that are similar to the X values here this is minus one and I don't want to have. The Y values the exact same value but there should be a little bit different and that's why we're using this this here. The map plot lid stuff is just here calling the scatter method to tell my plot to pay I want to draw scatter plot using my X and Y values. Okay so back to the slides. So oftentimes you don't want to create fake data but you want to take data from a file and there are really tons of ways to do this but I'll just show you one one or two of them one of the most often used method at least. And this is the built in CSV model to load CSV files because most of the big data files are CSV files again as you might have guessed you need to import the library first so that's the import CSV. And we use a sample file I've provided on blackboard which you need to download in order to import it. And then we use the CSV model reader to read in the data and it automatically splits the file by line and then the data in the file by the limit of each of which is which is I think it's the same color yeah. Just a quick note the CSV model and the CSV reader they don't require your file to be a little bit really a CSV file basically can be any text file which is still limited. So once we've done this we store the elements within index of zero so that's our first column the month column to the X list and restore the elements within index of one to our wireless so all the temperatures. After this we all sent and we are ready to plot and show the data. So back to the editor. So first thing is I need to import CSV as we're going to use the CSV reader next thing because I guess you you had that in your lectures. You need to initialize to empty lists because I want to read in the data into lists and these lists must already exist so I'm going to initialize to empty lists using this syntax so I have a X list which is empty and I have a wireless which is empty. OK, so then I'm going to read in the temperature file and that's where the this this pane here in spider comes in handy because I can just if you have downloaded the downloaded the file it is called temperature use CSV. You can save it anywhere on your hard drive and when you then go to the file in spider you can just right click on and copy the whole path. So you don't need to know where the file is and paste it anywhere here. OK, and then we have one parameter which is called R which is simply telling saying I just want to be the file I don't want to modify or execute it all stands for read. And it's a CSV file. Oh, what is that? Sorry. OK, maybe. OK, and it's too big. Is that all right? Can you can follow me along? All right, so now I'm going to read in the file using a function called reader and it's a CSV file and my delimiter is a semi call. OK. And then I'm going to use a follow to go through all the data and each time I'm going through it I'm pending a new values. So to append use the pen function and because that's not the same, the map look lib doesn't know that it's numerical values I have to use the infunction to convert it into numerical values. And I'm telling and hey, all the values in row zero, which is the, which was the month column. And I do the same with the Y values. So a bit more of the line 14 please. Yeah, sure. I think you have to zoom out a little bit. OK. I also made a typing mistake. Sorry about that. OK. OK. So once again, first thing initialize two empty lists X and Y because we want to load in our year data into X and our temperatures into Y. Then we need to tell the model where is our data, our file that's here and it's a readable file and it's a CSV file. Then we write all the values, which are limited by a semicolon in a variable called plots. And then we write a follow, which is going through this variable. And each time we append a new data. After we converted it into numbers. So that's again, I'm it's really about here loading in the data and has nothing to do with map plot lib. So it's just basic, Python stuff. And if you haven't done this, don't grow it too much. You can save this and use it every time you load in new CSV files. That's that's how you do it with a with the CSV model. OK. So and then you see we have our we have a curve for our data, which looks as expected high temperatures in the summer, low in the winter. OK. And you need to file OK. Let me see if I can post the filing the chat. Just give me a minute. OK. So you can know that the file from here. It's just some. It was 12 years of data from from temperature files random. Again, don't worry too much about this. It's just a follow and it's just going through this simple CSV file with two columns that so that's why we. We need to tell that the first row is the year row and the second row is the temperature. OK. Anybody having problems reading in the file to otherwise I can I can show you a second method to do that because. Yeah, that's usually how you get in you you get your data into into a matplotlib function reading in a external file. So you don't need to. Completely understand it, but you need some. OK. Can I ask you a question. Sorry. You hear me? Yeah, sure. Can you could you show us again how to find the position of the file? OK. So there's a there's a files pane here in in spider. OK. And I don't know where you're on your computer, but you can navigate in this file to the file, which is on my computer. It's in the data folder. And then when I right click on it, you can copy the absolute. Or if you have already saved your Python code, you also can copy your relative path. Click on it and then copy past it. Perfect. Perfect. Thank you very much. Yeah. Yeah, this at least I'm using this, this is a lot in. In spider. I don't know. I'm I'm pretty bad at figuring out where where data is on my computer. So I think that function is pretty handy. Yeah. OK. So, yeah. As I said, this is one of the most common things to do. That's why I'm showing you an alternative method to load in data using using numpy. So I'm quickly going once light back and show you the second method. So I think it's this is a bit easier because it's just you see it's just one one line of code. And you don't need any follow for that. You see, I'm going to use a method called low text. Then same thing, you need a path to the file, you need to tell which the limit you're using. And then you have an option, an option, a parameter called unpack true. And this one is doing instead of getting like one giant array with all data. I want to have two arrays one for year and one for temperatures. So I only need one line. I can in one line. I can tell numpy a the first one, the first area on my x value. So the month and the second on my y value. So the temperature. And that's the unpeg equals true option. And the rest is basically the same. So we are x and y values and you show it on screen. So if you prefer this method, this works totally fine. And you can try it out as well. If you like to. Sorry, I don't know why, but when I try to run the code with the ampak. It says the ampak is an invite keyword argument for dysfunction. How can I? I haven't tried it out. So let me go over to spider and check what's happening. So we can delete that. And then I'm saying x and 1. Oh. Fixed team. Uh, state must light wrong as well. Oh, it should work. What exactly is the error you're getting? I say that is an unvalid keyword argument for dysfunction. Maybe it's because I have to rewrite the xy epsilon equals and be load text. Yeah, I don't know. You know what, keep the code open and when we do the breakout session, you can show me afterwards. So we can look at your screen. What's wrong? Okay, I can get all right. Perfect. Thank you. Okay. So. Okay, so you see, I think that's easier, but it's up to you, which, which method do you like better? So that's it reading in files. Okay. I have to tell you this was basically the, I would say quick and dirty way to plot things just to get you started. There's a more accurate way you should remember and unfortunately it requires a little bit of theory, but don't worry. In my opinion, you just have to remember three things and your plotting life will be much easier. The other thing is figures hold the access. So figure is like I said, down at the bottom and on it lies the access and on access is where the magic happens. Because access hold everything else like a line or plot. And then we have back ends, which we haven't seen before and back ends to the heavy lifting, which we'll get to in a minute. Because in math plot, everything is made of objects. There is an object called figure one called access. There are objects called line to the page text artist many others. Some objects are children of others and others are members of others and it can keep and can get hard to keep track of which objects do what? The most useful relationship to understand is that figure objects contain access objects like you see in this picture here. And the figure is just what it sounds like a rectangle of light canvas on which your plot is constructed. Access objects are where all the plotting action happens and you can have way more than one axis in a figure. And you can place them wherever you want on a figure. And then you can place them wherever you want on a figure. So from this point on, that's what we have to do. In the first line, we use the pipe plot in the face. We already know to initialize a new figure and we save it to a variable called FIG. And then we get the current access objects with the GCA method and save it to a X. And then we get the current access objects and generating finished blocks. A figure doesn't do much. Most of the actions take place in an access object. And to make this explicit in our code, we will make sure to work on access objects directly, rather than using the pipe plot in the face we just did. Because this helps keep things clear when we have more than one axis, which you usually do in a figure. When plotting will use this syntax right now instead of the pipe plot dot plot X, Y syntax, we just used. Because the letter obscures the relationship between access and plotting. And also the name access is a little misleading as an access object contains both an X axis and a Y axis, which are objects in their own right as well as lines, patches, text annotations and the reason in which these are displayed. So final thing, what are back ends and why we need them, why we need to import them as well. Depending on whether you want to create a file plot to the screen or in a web browser, depending on what operating system and graphic drivers you're running, there are lots and lots of things met plot lip has to consider when creating a plot. So this last mile in making the plot concrete is handled by part of mad plot lip called a back end. And as you might imagine, there are lots of them. Because occasionally not everything plays to get a perfectly and something won't render a plot correctly on some combination of back end of your particular setup at home or everywhere else on a plot. And in order to avoid these frustrations, there's an approach that is pretty robust. What we do instead of displaying plots to the screen, we just save them as PNG files. And then we can look at them with whatever tool we want to. For this task, there is a high performance called back end and this is called AGG, which we see here the second line. And AGG chance for anti-grang geometry engine. And this works on every system and every platform. So it makes beautiful PNG files and is great even if you're working on a headless server and would like to generate visualizations or reports to look at somewhere else. And we've been working just these two lines at the very beginning of a python script is all we need to set up the AGG back end. Due to the quirk of the process, if you try this after importing pipeline, it will fail. After setting the back end to AGG, you can then proceed as usual and we import pipeline, we import numpy and anything else we might need. When it then comes to display a plot, you just need to save it to a file, passing in the path and the name of the new image and the safe function takes care of the rest. To keep things as clean as possible in our code example, we will usually work directly with the figure and access work to rather than using the pipeline. And the application we just use for the first two or three examples. Because it turns out, if you want to do much customization, which we will do, this makes our job a lot easier. Method lip has several ways to do most things and while this can provide convenience, it can also create a lot of confusion. So that's why I would suggest we stick with this method that most clearly reflects the underlying structure rather than the method that has the shortest code. This also gives us way fewer things to remember. Because the complexity in map of the list is there for good reason. Making attractive interactive images on every time of screen in every operating system is hard is really hard. Enabling customization for all various aesthetics and formatting requirements is also hard. And on top of that, making a simplified interface to do this complexity that doesn't scare us all the way. But still preserves the most useful functionalities even harder. So. Let's try this one out with a little more complex task. Okay. Okay, generally, you want to plot them something other than single solid single line. And here are just some examples. We can tweak first. But again, we need to set up things first. So. First thing is we select the AGG backend. And then make our relevant inputs and then we create a curve to work with. And then we use again the Lin space and the sync function to create some sample data. And then we create a new figure and access. And we are ready to work. You see it's still just a couple of lines of code. A couple of lines more, but still a couple of lines in order to do beautiful graph to visualize create amounts of data. So for starters, let's just draw a thicker line this time, something that looks like like this. Okay. And. We therefore use the line with argument. Which lets you basically set the width of your line in points just for comparison. The default value is one. So 15 is a pretty thick line as we see here. And the last thing we need to do is we save this block to a new file on our hard drive. And that's it. We are ready to go. So let's move back to spider and we'll try that one. I'm going to delete everything here and starting fresh. As I said, we need to import the backend first. So import map.lib and then match.lib.use the AGG backend. That must be the first line. Again, we as usual, we import a pipeline. And we import non-pile to get some data. So first thing again, we initialize the figure by this time we save it to fix. And second thing is we create the current access object using. He. A. Perfect. So now we need to create some data. Like we already done, we use the space function. This time. We use values all between minus six and six. And again, we want to have a lot of values. So let's say 500. And for our way values, we use the same function. Handing over our just created x values. So then like before, but it's time using a x. We call plot with our x and y values. And now we want to have a really, really thick line. So line with is at two 15. And we don't want to show it on screen, but also save it. So we use the safe. And now it's up to you where you're saving. So you see. I'd be able to see. Maybe I need to zoom in again. You see my test.py file is here. So if I want to save this figure to let's say the image folder. I can go right into that. So meaning. I do images. Sorry. And then let's say white line. And this will save it down here in this folder. All right. So. What did I do wrong? Yes. Isn't supposed to be our. Oh, man. Okay, that doesn't look too good. What's the problem? Does anybody see a mistake on making? Oh, thank you very much. Very good. Thanks. Thanks a lot. Okay. So. Are you able to replicate it? And. And save it to your. Yeah, there it is. Maybe to your hard drive. Is anybody having problems or can we move on? Okay, no problem. That's good. Don't be shy. Just tell me if it's too slow or too fast. Yeah, there's no problem. So back to the slides. What else can we customize? Yeah, for example, we can specify the color using the color or see argument. Another common manipulation is to change the style of a line from solid to dashed or maybe dotted. And you can control this using the line style argument. And you can choose from I don't know, dash, dotted, dash, dotted. You can even create your own issue if you'd like to. And I'm a common trick is to put more than one line on a plot. It's very common. And luckily, this is as easy as repeatedly calling the plot function. Here in the example, every time with a slightly different Y-well, you can see the different lines that we can see the different lines. And you can do this as many times as you want. You can even have, I don't know, thousands of these graphs, it just in one single plot. Maybe you have to wait a little bit to be drawn, but it gets there eventually. And occasionally, you want to really get in control exactly how your lines look like. The styling of the tips of the lines, which are called cap style. And the bends in the lines, which are called joint style, let you do this. The solid cap style and solid joint style options in this nip of the bus. Give the varying effect seen in this figure you see here. You can also make use of the dash cap style and dash joint style with broken lines, if you want to, and they take the same set of arguments. Okay. And there are really lots and lots of out of fine details of lines you can control. You can get really, really creative here. And if you're curious, I just linked the full API documentation in this resource pages here. So if you'd like to, you can take a look at all the options that are at your hands with styling, Matrot, lead lines. So that's the first part, Matrot, the lines. I would suggest we do like a five minute. And then I'll open up some some breakout rooms where we can do a couple of exercises. I've provided all the exercises to download. So I hope you had a chance to download it otherwise. So can you send the image on which image. Matrot, which image are you referring to? I just said that you have to write the pre-code. You have to write the like a link to an image or something. I would just typing and if you can go in the code you just done. I can maybe be more. Okay. And then I'll just write the white line that part is an image not png. He may. Yeah. Okay. Sorry. It's a png and I'm saving it here in. In this image folder. Okay. Was that your question where the file is saved? The image because I don't know what to write in the part because I have nothing saved. Okay. Okay. Okay. So, yeah. If you want to save the image somewhere, you have to save your code first because otherwise. Your computer doesn't know where to save it. Just save it as a dot p y file somewhere on your heart disk. And then this line is the relative path to that code. So if you don't put images, if you just put wide line png will be saved at the exact same location as you save your python file. Okay. So that's the image we're creating with the program is that something we are uploading on the code. Exactly. If I skip this one, it will be saved in this folder here instead. So what? The bracket nothing and it will just write the link by itself. No, no, you have to have to type in the name under which this image will be saved. Okay. The name. Okay. And then the image will be saved here and that's that's what I just saved this image here for double click it. It will open up here in a. We'll serve it in the same file will I save the. No, you save it really on your hard drive. Yeah, because that's that's the idea behind it because if you want to take a look at your graph somewhere else on a different computer, different system. It will always look exactly the same. And that's why we save it as a as a file instead of showing it up on the screen because if you show it on the screen. It will look like depends on the system you're on. We don't want that people want the plot to look exactly the same no matter where we are looking at. Okay, not clear. Thank you. No problem. No problem. Okay. So does everybody have the the exercises and I have uploaded it like for all do you need want me to post them in the chat. If everybody has the exercises, I would say yeah, you can do a quick break. Whatever, how long you want to and I will split you up in the break out rooms and I would suggest to the exercises one eight to one C so three exercises. So I will go with with lines and I will come into to each group with there is any problem or if you want to show me something and then yeah, so five minutes, yeah, we will. I think we do this for 15 minutes. So we meet up close the break out rooms that quarter to four. Is that all right for everybody? Okay. So. Okay, then I will split you up into rooms and you can start at your own pace or just if you don't have the exercises or have problems just hit me up, but I will come into each room. Okay, see you in a couple minutes. you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you you we we are all right just a couple more seconds and then go back to the slides. Okay. So how did it go? Has everybody was everybody able to do the exercises or was there any major problems? Oh, everybody good? Perfect. Okay. So then let's move on to the slides again. The first part was all about styling lines. But much more often you have what we have already seen points or markers as they call them a bloodlip. And they can be styled as well. They can even be more style, which we will see. And let's do that in the second part of that. So going to share my screen again. And again, if there is any trouble with the slides or with anything I said, just hit me up in the chat. So. Alright. Everybody able to see the slides? Good. So as you can see, it's also possible to style the points or as I said, markers quite a bit. Which is which is pretty useful, especially when we have a lot, lots of data like we see in the last picture. And it's pretty great. The method is pretty straightforward. Like we did with the lines first. And we select the backend and make all the relevant imports. Then we create a curve using fake data. And we create our figure and access. And that's basically it. So. If you want to do a scatter block with way bigger points, then we have the s argument, which lets you set the size of the markers. The size is in points squared. Let's say if you want to mark over 10 points high, you choose s equals 100. Alright. So let's quickly head over to the editor and just write to plot some so big points. Okay. So. We can we can leave this all as before. We just create some values between minus one and one. And for the why values we use again, similar values, just use our x values. And again, the random normal distribution using the size. Of our x values. Alright. Then. We can draw a scatter plot using the x and y values. And. As I said, we want to have big, big points. So we go with 80 for the size. So the 10 is the default. So they will be they will be much bigger. And we save and. I'm saving it and my images all end. I don't know markers. underscore large. Okay. So. What did I forget? Oh. Thanks again. Okay. Very good. Okay. So. Just. So that you see these are supposed to be bigger. Because yeah, if I do a they're way smaller and we do one. 100. They're way bigger. So. So you can modify the size of all markers. But you're also able to modify every single marker you want. The way I did this was I just randomly assigned different sizes to. Different markers. Sometimes also. A circle just isn't enough. You want something different. And luckily, MAPLOWLIP has recovered there as well, because there are thousands of options. Plus the ability to create custom shapes if you want to. So you just use the marker argument and the right character code. I put up here some examples. You can choose whatever style you like. Comment. You want a point circle square triangle plus X. And so on. Also. Having differently state markers. Is very good if you want to distinguish between different groups of data. For instance, if your control group is is all circles and. You make your experimental group all access. And you can see the difference pops out into people who can't differentiate between colors. That's that's one benefit. And. There's. There's also the possibility to change the color of the markers as well. So right here we have a beautiful orange for the for the markers as well. If you want to get extra fancy. And you can control the color of each point, individual really like with the size. And this is what really makes the scatter function special. One way to go about this is to specify a set of numerical wallet values for the color. One for each data point. That's what I'm doing here. I'm just assigning some random numerical value to the color and met blood lip uses this number to just. And you use different colors for each new data point. Very, very easy, very convenient. This is particular useful when you have lots and lots of overlapping markers. And you would like to get a sense of their density to illustrate this. We need first to create a lot of data points. Then we can also use something like the alpha argument. And set it to something small. So each individual point only contributes to a small amount of digital ink to the picture. This way you can quickly see at one glance where there are lots of data points because that's where the result is the solid color. Alpha equals one represents no tearing no transparency and is always the default. So then we have also the edge color parameter, which is necessary to remove the markers outlines. For some marker types, at least the alpha argument doesn't apply to the outlines and only the solid color. But I will show you this in the example. And there are lots and lots of other fine details you can control. And if you curious again, just check out the API documentation. Good. I have provided some exercises for this too, but let's just move on to the. To the max slides and you can do the exercises combined with the third exercises. Okay. So the third part is. Unfortunately, text is one of the trivia things to get right on a plot because there are so many options and permutations. Anyone who's honest will tell you that they Google the syntax every time I'll do that too when doing my plot lips text for me. I can change that, but I at least want to give wanted to give you like a one stop shop where you can go back. And you if you need to search for where to put a text in your blood. So I just listed a couple of possibilities of text in a blood. For example, you can have labels. You can have arrows equations text in the box without a box. So even, yeah, even fancy fancy annotations. So what do we do first as usual, we need to set the stage by importing the relevant libraries and we need to create some fake data for the curve. And then we can set the x axis label the y axis label or title with these three functions here. I think the calls for doing this are fairly intuitive. So the style is pretty generic, but you'll get a chance to customize the style of the text later on. But for starters, I would say let's let's try to replicate this this image first. So going ahead back to spider and we'll try to do the axis labels and a title. All right. Let's do minus six till six and have a couple more values, let's say 500. And we just use the sync function with our x values. And then plot, plot it on screen. And then we set a label for x axis with the set x label. And let's call it, I don't know, the x axis label and we do the same for the y label. And also we want to have a title. So we use the set title method. And let's say this is the title. Simply last step is to save it in a file. So this is my title. Okay. So we see the title, we have an x label, x label and we have a y label. So I think at least that part is is pretty straightforward still. Anybody okay with that? So basically you can add any text you want to to any location on your plot. The invitation of text x, y, then some text lets you arbitrarily place your note anywhere in the plot like you see here. Just using plot coordinates. You may have noticed that choosing an x and the y for the text precision is a little ambiguous. Are you choosing the location for the bottom of the text or for the top of the text left, right. It's not really clear. So your system will have default answers to ease of these questions in place. But sometimes you just want a little more control over that. So the horizontal alignment argument. Let's specify whether the exposition you feed it should be for just to the right of the text. To the left of the text or the center. And as you probably guessed, same for the vertical alignment argument, it lets you specify where the y precision you supply should fall. The top of the text at the bottom or in the center. And there is also a baseline option, the position of the bottoms of most of the letters, except for things with tail like I don't know why a g or a p or a q. Okay. And now that we have our text precisely located, we can take a look at the formating of the text. Basically you can format everything size for style color. Keep in mind, as with most of the text modifications here, you can apply these to access labels and you can apply it to titles to the. The inverse for both, but doing this requires a bit more complex in quotation, which you see up here. It doesn't look pretty at all. The text method accepts a B box argument, which takes a dictionary of keywords. That's what you see in the brackets. And they describe the bounding box. Where box style is a good place to start, it comes colorful by default, but if you specify a white box face color, it will blend in more nicely. But as usual, you can do a lot more customization and like before I put a link here, where you can take a look at the resources pages. So yeah, that's that's for annotations. It really isn't beautiful at all. Last thing, a powerful way to turn a picture into a story is with annotate is with writing equations. Also, you look pretty smart if you write equations in a plot. But it's really, really complicated. If you happen to have latex on your computer, you can use it to type set your equations writing your plots. So simple, it will be crisp, your placements will be correct and your equations will be logical and even when unintelligently aesthetic pleasing. So there are a couple of little tricks to get this working. First, you need to make sure that setting use text is set to true. Then you need to make sure to use r strings so that Python doesn't try to convert escape characters in the string. So don't forget to enclose your equation in dollar size, because that tells latex to end on math mode. You can drop these interactive expressions anywhere you put text in access labels and titles and as I said in annotations. Again, if you'd like to learn more about latex and plots, there's a link in the resources. I just sped a little bit to these details because most of the time you won't need that. But I wanted to give you some slides you can look up if you ever come across equations or annotations and you want to put them into your slides. It's really complicated to search that stuff if you need it. So I would just save that somewhere on your hard drive and you will, if you ever come across something like this, you can just look up the syntax, but you don't have to learn it's it's nothing you will use every day. Yeah, and as always, you can just check out the API documentation, which is pretty pretty huge. So a much more common thing you style and this is the last part are the ticks. So well fermented access ticks, they can elevate the platform from serviceable to professional, but unfortunately, it's also very tough to do in that plot. But I can show you a way which is which is pretty easy. So there are at least different ways to perform most tick formatting operations and I've chosen to stick with the set that feels like the most consistent, but don't be surprised when you come across lots of alternatives on stack overflow or somewhere else. And here just a few examples of some ticks like logarithmic ticks ticks on the opposite side of the access minor ticks minor ticks with labels and so on. So how we do this again, first we set the stage like usual by importing the relevant libraries and then we created data for the curve. And let's start with setting the access limits because by default, but lip uses the range of the data to choose reasonable limits for itself. Most of the time that time, but occasionally you want a little bit more control. Maybe you want to avoid suppressing your zero or to ensure that multiple plots have the same scale or you want a driver, certain aspect ratio, or maybe you just want to like having the limits fall on on even or on whole numbers. Whatever the reason specifying limits just gives you a greater degree of control over the framing of your plot. So this is one of the most self explanatory examples in the bunch. So the way to do this is just choose the minimum, choose the maximum and there you go. That's that's basically it. So let's go back and try to set some limits. Let's do one till 13 go 500 and go for a little bit different values over here using sync function. Set the. X limit to. You see, we will create values between one and 13 500. So I set the limits to one and 14. So a little bit bigger because. If I had met plot lib do that, it will probably set the limit to one and 13 so that it stretches the whole image, but if you want to have a little bit more space, you just, you just make it a little bit bigger than your data. So that's why I'm choosing one and 40 and. Let's go for the why so set. Why limits and we do pretty small or point to and 2.2. And we save it to. I don't know. It's. So now you see I have a little bit space on the right and I have a little bit space down here at the bottom, which I didn't, which I wouldn't have if I would have met plot lib create a limit by itself. So that's why we're doing that. Okay, it gives you just another opportunity to customize the plot like you want to, you want it to look like. So, everything clear, I, any problems or. Am I too fast. Okay. So. Then what else we have the logarithmic. No, it's okay. Some data. Lens itself well to logarithmic scaling on one of its axis or maybe on both. Man, but it handles that also very nice. It even adds a second set of smaller ticks. You see here without any labels and these are called minor ticks. So they help the fewer just resolve locations. So minor ticks will be showing up again later examples as well. So fine control over ticks. It just can make the story of plot tells crisper by default. They sit just outside the plot frame, but you can place the ticks inside the frame or halving or halved out as as you like. To adjust this aspect of tick behavior, we get to use the tick parents method. So everything we do with major ticks can also be done with minor ticks as well. Just just to know that. The. Yeah. So here. We set the. X axis ticks in. So they appear inside our graph. And we set the y axis ticks in out in out means they are between in and out. And we don't know on the y axis. That's that that was it. That is what in out means in this case. Okay, by default. I hope you can do this with major ticks, but also with minor ticks as well. But the default value is major ticks. So if you want to do this with minor ticks, you have to specify it here. By default ticks and labels will always be added to the left and the bottom. So that's the default value. And to change this, you just use the tick parents. Okay, here for the accesses and here for the y axis. The bowling arguments. Bottom top right. And left determined whether the ticks are shown. And left guess tick labels are similarly controlled using label bottom label top label left label right and you can have one without the other or you can have both or either of any axis or any combination you would like. Sometimes if your taste is particular, the default text just aren't quite right. So you can even adjust the length with all the color of your ticks as well. Just another set of parameters and they're called will flanks and they are measured in points. And for color also every color that you can imagine is possible. So this looks quite weird, but whatever you like. In the section of our text, we saw you can customize access label and plot text in the way, but we stopped short of showing how to handle tick labels. So now we are finally get to that as well. As you can see, this gives you a fair amount of power or over your tick labels. That's because when the access our first created method, it makes a reasonable guess at how much space the ticks and access labels are going to take and places the plot accordingly. So in this case, it was too less space so you don't see the numbers at the bottom. So that's a great illustration of how sometimes we will need to take the access layout and draw our own hats, just one example of that. And last thing, when we got minor ticks for free, we got minor ticks for free as we used the lock scale. But if we want to add minor scales to linear scales, we can we can do that as well to do this. We have to introduce the notion of a locator. It's a function that generates the locations according to some rules you specify. And there are several different types, but outer locators are great place to start day because they automatically create a reasonable set of ticks. By default, major ticks are initialized with an outer locator, but minor ticks unfortunately aren't so to turn them on, we have to import the outer. So minor locator and then use it to set the minor ticks for the X and Y axis. And that will look something like this. Another powerful tool is called the formator and it's a function that lets you transform the tick labels to be an integer, a fixed decimal or lots of other things. First, we import it and then use it to create tick labels using just the coordinates of each tick itself. The helpful package that contains all the formators and locators is called ticker. And again, if your crew is about it, there's lots of details in the API and I will put up a link in the resources to. So the final thing is, which is called the cousin of the tick and it's called the grid. And the grids are basically tick lines across the entire plot. These want to pretty easy to create and you just have to use the grid command. Also, it defaults to making both X and Y grids lines. You can also handle them individually in your code as well, if you'd like to. It takes all the arguments that we could pass the plot and when we were formatting a line, so there's nothing special to that. So after the complexity of ticks, it's a pretty straightforward way to make your plots stylish and readable. So do we have anything? So that's basically all the things you can control with map plot lib. So basically everything. I know that was quite a lot. Again, it's not that you know all the stuff and all know how everything is style or customized. So just to give you advance what is possible with we've mapped out lib and then you have a kind of resource where you can where you can look up all these things. If you if you have the need to customize. I would suggest you do a couple of more exercises. I provided one for the for the markers and one for the ticks. And there's also a bonus exercise just if you want to. If you think the other exercise is a bit too easier if you're more advanced. There's a bonus exercise with with pangins I had for I think from GitHub. That one is pretty complicated, but if you if you'd like to just take a look at the bonus exercise and I will post the solution to this. And in all blackboard as well. So yeah, I think I will do that right after the lesson. So I would suggest quickly go to another breakout session to a couple more exercises for for 10 minutes just to. To do. How many have been. We had just a 50 moments. But if you have a question before just. I actually do have one. Yeah sure. Sorry I wasn't really able to plot to the. Graph with a lot of a lot of points. Yeah, when we did after the one that has a lot of color and goes from dark blue to yellow. Okay. Marker's transparent probably. So we still. The one after. And then we did that one. It just came out like very white. Picture so. Are you trying to replicate it and it came out as a white picture. Okay, so let's let's try that. Yeah. Just a moment. Yeah. Yeah. Yeah. Yeah. Maybe it doesn't recognize this. It seems like the problem was the way I typed. The number of of markers I want. So if you try just a really big number like 50,000. It should work. Instead of non equal to one. Yeah. Okay, just put the big number. Okay. I think that's right. Yeah. Yeah, that should do it. Okay. And it works. Any other questions. Okay. Okay. Okay. Okay, perfect. So, yeah, just try a couple of more of the exercises for. Let's say. Yeah, just try one. And then we'll meet. We'll meet back at five to. It is 425. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Okay. Unfortunately, it's already 425. So we are almost finished with our first lecture. I hope you had, you had some fun with it. We learned how to the basics of machine learning and what is. What are the, what machine learning is capable of, but also some of the. Some of the dangers you come across, then we took a look at map, or lip and how to plot a line, how to do a scatter plot, and a lot of, of styling of, of customization. And. And a lot of, it's your, a lot of examples and the exercises sheet. So I would suggest to do at least a couple of them and really just shoot me a quick note. If you have trouble with any of these. And I would also suggest just take a look at the bonus exercise. It's, it's not quite easy, but it's, it's more of a, of a real life example. I quickly show you where, where I got the data. You can download the sample data from, from blackboard. Just like quickly share my screen. So you can see where the data is from. So that's a, that's a GitHub project, which is called Palmer penguins or the data set is called Palmer penguins. And basically, it's a data set with three different species of penguins. And they are different in their bill length and their flipper length. And what you should try to do in this exercise is try to replicate exactly this graph because we've handled everything. You need to know about this. You see we have different markers. We have circles. We have triangles. They have different colors for each of those groups. And you have a grid and you have access, a Y axis label. You have the X axis label. You have a title. So there's everything in we just call it today. But, as I said, it's not, it's not easy. Yeah. So give it a try. And if you have any problems with that, just give me a quick note. And I'll try to help you with that. So. We are nearly finished. Have you, have you any questions for me or do you have anything unclear? Or did you have problems downloading any of the stuff? Did you like it? Okay, thanks. Good. I think we don't have lectures next week, right? I think next week, our holidays. Is that correct? Yes, we don't have. Okay, okay. Yeah. I have two weeks time to try out all the mat lots of lip stuff. If you, if you like to give the exercise a try. Other than that, I will post the link to all the stuff we did today. And also I will post the link to the solutions of every exercise. And maybe in a couple of days, the solution to the bonus exercise. And also, if it's already the, the recording to the whole session. And if there's anything else. Thanks for attending. And I have a great holiday and see you in two weeks when we are doing. Supervised learning introduction to supervised learning and. Big chapter, which is called pre processing, which always takes a lot of time in every machine learning project. And then we will come across. Okay. Thank you very much. And every day, thanks. YouTube. Thank you. Thank you. Bye. Bye. Bye. Bye. Bye.