The following is an unstructured video transcript of a machine-learning lecture of Tobias Laemmle. Write a detailed summary about the given topics.

TRANSCRIPT:

Again, don't worry too much about this. It's just a follow and it's just going through this simple CSV file with two columns that so that's why we. We need to tell that the first row is the year row and the second row is the temperature. OK. Anybody having problems reading in the file to otherwise I can I can show you a second method to do that because. Yeah, that's usually how you get in you you get your data into into a matplotlib function reading in a external file. So you don't need to. Completely understand it, but you need some. OK. Can I ask you a question. Sorry. You hear me? Yeah, sure. Can you could you show us again how to find the position of the file? OK. So there's a there's a files pane here in in spider. OK. And I don't know where you're on your computer, but you can navigate in this file to the file, which is on my computer. It's in the data folder. And then when I right click on it, you can copy the absolute. Or if you have already saved your Python code, you also can copy your relative path. Click on it and then copy past it. Perfect. Perfect. Thank you very much. Yeah. Yeah, this at least I'm using this, this is a lot in. In spider. I don't know. I'm I'm pretty bad at figuring out where where data is on my computer. So I think that function is pretty handy. Yeah. OK. So, yeah. As I said, this is one of the most common things to do. That's why I'm showing you an alternative method to load in data using using numpy. So I'm quickly going once light back and show you the second method. So I think it's this is a bit easier because it's just you see it's just one one line of code. And you don't need any follow for that. You see, I'm going to use a method called low text. Then same thing, you need a path to the file, you need to tell which the limit you're using. And then you have an option, an option, a parameter called unpack true. And this one is doing instead of getting like one giant array with all data. I want to have two arrays one for year and one for temperatures. So I only need one line. I can in one line. I can tell numpy a the first one, the first area on my x value. So the month and the second on my y value. So the temperature. And that's the unpeg equals true option. And the rest is basically the same. So we are x and y values and you show it on screen. So if you prefer this method, this works totally fine. And you can try it out as well. If you like to. Sorry, I don't know why, but when I try to run the code with the ampak. It says the ampak is an invite keyword argument for dysfunction. How can I? I haven't tried it out. So let me go over to spider and check what's happening. So we can delete that. And then I'm saying x and 1. Oh. Fixed team. Uh, state must light wrong as well. Oh, it should work. What exactly is the error you're getting? I say that is an unvalid keyword argument for dysfunction. Maybe it's because I have to rewrite the xy epsilon equals and be load text. Yeah, I don't know. You know what, keep the code open and when we do the breakout session, you can show me afterwards. So we can look at your screen. What's wrong? Okay, I can get all right. Perfect. Thank you. Okay. So. Okay, so you see, I think that's easier, but it's up to you, which, which method do you like better? So that's it reading in files. Okay. I have to tell you this was basically the, I would say quick and dirty way to plot things just to get you started. There's a more accurate way you should remember and unfortunately it requires a little bit of theory, but don't worry. In my opinion, you just have to remember three things and your plotting life will be much easier. The other thing is figures hold the access. So figure is like I said, down at the bottom and on it lies the access and on access is where the magic happens. Because access hold everything else like a line or plot. And then we have back ends, which we haven't seen before and back ends to the heavy lifting, which we'll get to in a minute. Because in math plot, everything is made of objects. There is an object called figure one called access. There are objects called line to the page text artist many others. Some objects are children of others and others are members of others and it can keep and can get hard to keep track of which objects do what? The most useful relationship to understand is that figure objects contain access objects like you see in this picture here. And the figure is just what it sounds like a rectangle of light canvas on which your plot is constructed. Access objects are where all the plotting action happens and you can have way more than one axis in a figure. And you can place them wherever you want on a figure. And then you can place them wherever you want on a figure. So from this point on, that's what we have to do. In the first line, we use the pipe plot in the face. We already know to initialize a new figure and we save it to a variable called FIG. And then we get the current access objects with the GCA method and save it to a X. And then we get the current access objects and generating finished blocks. A figure doesn't do much. Most of the actions take place in an access object. And to make this explicit in our code, we will make sure to work on access objects directly, rather than using the pipe plot in the face we just did. Because this helps keep things clear when we have more than one axis, which you usually do in a figure. When plotting will use this syntax right now instead of the pipe plot dot plot X, Y syntax, we just used. Because the letter obscures the relationship between access and plotting. And also the name access is a little misleading as an access object contains both an X axis and a Y axis, which are objects in their own right as well as lines, patches, text annotations and the reason in which these are displayed. So final thing, what are back ends and why we need them, why we need to import them as well. Depending on whether you want to create a file plot to the screen


GIVEN TOPICS:

-Loading data into a matplotlib function
-Using numpy to load data
-The relationship between figure objects and access objects
-The purpose of back ends


DETAILED SUMMARY:


==========

In the lecture, Tobias Laemmle explains how to load data into a matplotlib function and use numpy to load data. He also discusses the relationship between figure objects and access objects. He explains that figure objects contain access objects, which are where all the plotting action happens. He also explains that back ends are used to create a file plot to the screen.