The following is an unstructured video transcript of a machine-learning lecture of Tobias Laemmle. Write a detailed summary about the given topics.

TRANSCRIPT:

text you want to to any location on your plot. The invitation of text x, y, then some text lets you arbitrarily place your note anywhere in the plot like you see here. Just using plot coordinates. You may have noticed that choosing an x and the y for the text precision is a little ambiguous. Are you choosing the location for the bottom of the text or for the top of the text left, right. It's not really clear. So your system will have default answers to ease of these questions in place. But sometimes you just want a little more control over that. So the horizontal alignment argument. Let's specify whether the exposition you feed it should be for just to the right of the text. To the left of the text or the center. And as you probably guessed, same for the vertical alignment argument, it lets you specify where the y precision you supply should fall. The top of the text at the bottom or in the center. And there is also a baseline option, the position of the bottoms of most of the letters, except for things with tail like I don't know why a g or a p or a q. Okay. And now that we have our text precisely located, we can take a look at the formating of the text. Basically you can format everything size for style color. Keep in mind, as with most of the text modifications here, you can apply these to access labels and you can apply it to titles to the. The inverse for both, but doing this requires a bit more complex in quotation, which you see up here. It doesn't look pretty at all. The text method accepts a B box argument, which takes a dictionary of keywords. That's what you see in the brackets. And they describe the bounding box. Where box style is a good place to start, it comes colorful by default, but if you specify a white box face color, it will blend in more nicely. But as usual, you can do a lot more customization and like before I put a link here, where you can take a look at the resources pages. So yeah, that's that's for annotations. It really isn't beautiful at all. Last thing, a powerful way to turn a picture into a story is with annotate is with writing equations. Also, you look pretty smart if you write equations in a plot. But it's really, really complicated. If you happen to have latex on your computer, you can use it to type set your equations writing your plots. So simple, it will be crisp, your placements will be correct and your equations will be logical and even when unintelligently aesthetic pleasing. So there are a couple of little tricks to get this working. First, you need to make sure that setting use text is set to true. Then you need to make sure to use r strings so that Python doesn't try to convert escape characters in the string. So don't forget to enclose your equation in dollar size, because that tells latex to end on math mode. You can drop these interactive expressions anywhere you put text in access labels and titles and as I said in annotations. Again, if you'd like to learn more about latex and plots, there's a link in the resources. I just sped a little bit to these details because most of the time you won't need that. But I wanted to give you some slides you can look up if you ever come across equations or annotations and you want to put them into your slides. It's really complicated to search that stuff if you need it. So I would just save that somewhere on your hard drive and you will, if you ever come across something like this, you can just look up the syntax, but you don't have to learn it's it's nothing you will use every day. Yeah, and as always, you can just check out the API documentation, which is pretty pretty huge. So a much more common thing you style and this is the last part are the ticks. So well fermented access ticks, they can elevate the platform from serviceable to professional, but unfortunately, it's also very tough to do in that plot. But I can show you a way which is which is pretty easy. So there are at least different ways to perform most tick formatting operations and I've chosen to stick with the set that feels like the most consistent, but don't be surprised when you come across lots of alternatives on stack overflow or somewhere else. And here just a few examples of some ticks like logarithmic ticks ticks on the opposite side of the access minor ticks minor ticks with labels and so on. So how we do this again, first we set the stage like usual by importing the relevant libraries and then we created data for the curve. And let's start with setting the access limits because by default, but lip uses the range of the data to choose reasonable limits for itself. Most of the time that time, but occasionally you want a little bit more control. Maybe you want to avoid suppressing your zero or to ensure that multiple plots have the same scale or you want a driver, certain aspect ratio, or maybe you just want to like having the limits fall on on even or on whole numbers. Whatever the reason specifying limits just gives you a greater degree of control over the framing of your plot. So this is one of the most self explanatory examples in the bunch. So the way to do this is just choose the minimum, choose the maximum and there you go. That's that's basically it. So let's go back and try to set some limits. Let's do one till 13 go 500 and go for a little bit different values over here using sync function. Set the. X limit to. You see, we will create values between one and 13 500. So I set the limits to one and 14. So a little bit bigger because. If I had met plot lib do that, it will probably set the limit to one and 13 so that it stretches the whole image, but if you want to have a little bit more space, you just, you just make it a little bit bigger than your data. So that's why I'm choosing one and 40 and. Let's go for the why so set. Why limits and we do pretty small or point to and 2.2. And we save it to. I don't know. It's. So now you see I have a little bit space on the right and I have a little bit space down here at the bottom,


GIVEN TOPICS:

-text formatting
-
-annotation
-
-equations
-
-ticks


DETAILED SUMMARY:


==========

-The 'text' method in matplotlib allows for precise placement of text anywhere in a plot, using x- and y-coordinates.
-The 'horizontal alignment' and 'vertical alignment' arguments can be used to control where the text is placed relative to the x- and y-coordinates.
-The 'baseline' argument can be used to control the position of the bottom of the text relative to the y-coordinate.
-The 'bbox' argument can be used to control the appearance of the text box.
-The 'use text' and 'r strings' arguments can be used to control the formatting of equations in a plot.
-The 'set_xlim' and 'set_ylim' methods can be used to control the limits of the x- and y-axes.
-The 'tick_params' method can be used to control the appearance of ticks on the x- and y-axes.